<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
 	http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
 	http://www.springframework.org/schema/tx
 	http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
  	http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-2.5.xsd
    http://code.alibabatech.com/schema/dubbo  
    http://code.alibabatech.com/schema/dubbo/dubbo.xsd  
    ">

	<context:component-scan base-package="com.hehaoyisheng.testSeller.*"></context:component-scan>
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost/testseller" />
		<property name="username" value="root"></property>
		<property name="password" value=""></property>
	</bean>
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"
		lazy-init="false">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
		<property name="packagesToScan" value="com.hehaoyisheng.testSeller.entity" />
	</bean>


	<bean id="defaultTransactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="defaultTransactionManager"
		proxy-target-class="true" />
		
	<!-- 具体的实现bean -->  
    <bean id="demoService" class="com.hehaoyisheng.testSeller.main.QueryStockImpl" />  
      
    <!-- 提供方应用信息，用于计算依赖关系 -->  
    <dubbo:application name="hehaoyisheng_provider"  />  
    
    <!-- 使用zookeeper注册中心暴露服务地址 -->  
    <dubbo:registry address="zookeeper://127.0.0.1:2181" />   
    
    <!-- 用dubbo协议在20880端口暴露服务 -->  
    <dubbo:protocol name="dubbo" port="20880" />  
   
    <!-- 声明需要暴露的服务接口 -->  
    <dubbo:service interface="com.hehaoyisheng.testSeller.main.QueryStock" ref="demoService" />
    
    <bean id="msgListener"
		class="com.hehaoyisheng.testSeller.main.ConsumerMessageListener"></bean> <!--Listener配置 -->
	<bean id="consumer" class="com.aliyun.openservices.ons.api.bean.ConsumerBean"
		init-method="start" destroy-method="shutdown">
		<property name="properties"> <!--消费者配置信息 -->
			<map>
				<entry key="ConsumerId" value="" /> <!-- CID,请替换 -->
				<entry key="AccessKey" value="" /> <!-- ACCESS_KEY,请替换 -->
				<entry key="SecretKey" value="" /><!-- 
					SECRET_KEY,请替换 -->
				<!--PropertyKeyConst.ONSAddr 请根据不同Region进行配置 公网测试: http://onsaddr-internet.aliyun.com/rocketmq/nsaddr4client-internet 
					公有云生产: http://onsaddr-internal.aliyun.com:8080/rocketmq/nsaddr4client-internal 
					杭州金融云: http://jbponsaddr-internal.aliyun.com:8080/rocketmq/nsaddr4client-internal 
					深圳金融云: http://mq4finance-sz.addr.aliyun.com:8080/rocketmq/nsaddr4client-internal -->
				<entry key="ONSAddr"
					value="http://onsaddr-internet.aliyun.com/rocketmq/nsaddr4client-internet" />
			</map>
		</property>

		<property name="subscriptionTable">
			<map>
				<entry value-ref="msgListener">
					<key>
						<bean class="com.aliyun.openservices.ons.api.bean.Subscription">
							<property name="topic" value="buy_hehao" />
							<property name="expression" value="*" /><!--expression即Tag，可以设置成具体的Tag，如 
								taga||tagb||tagc，也可设置成*。 *仅代表订阅所有Tag，不支持通配 -->
						</bean>
					</key>
				</entry>
			</map>
		</property>
	</bean>
</beans>